module Random where

import Prelude
--import Control.Monad.State
import Test.QuickCheck.Gen
import Signal

--runState :: forall s a. State s a -> s -> Tuple a s

foldpM :: forall a b mb c. (mb -> c -> Tuple b c) -> c -> (a -> b -> mb) -> b -> (Signal a) -> (Signal b)
foldpM run st' f st = foldp (\xa (Tuple xb xc) -> uncurry run (Tuple (f xa xb) xc)) (Tuple st st')

foldpR = foldpM 
